<%- include('../../partials/head'); %>

<body>
<div class="layout">
  <%- include('../../partials/header'); %>
  
  <%- include('../../partials/sidebar'); %>

  <main id="usersCreate">
    <h4 class="mb-4 fw-bold">
      <span v-if="displayType === 'create'" class="fs-4">ユーザー登録</span>
      <span v-if="displayType === 'detail'" class="fs-4">ユーザー詳細</span>
    </h4>

    <div v-if="errors.length" class="alert alert-danger">
      <div v-for="(item, index) in errors" :key="index">
        ■{{ item.property }}エラー
        <p v-for="(v, i) in item.constraints" :key="i">{{ v }}</p>
      </div>
    </div>

    <form @submit.prevent="onUpsert" name="usersFrom">
      <div class="row mb-4">
        <input v-model="id" type="hidden" name="id">
        <label class="form-label">id: {{ id }}</label>
      </div>
      <div class="row mb-4">    
        <label class="form-label">名前</label>
        <input v-model="userName" type="text" name="userName">
        <div v-if="$v.userName.$dirty" class="text-danger fw-bold">
          <span v-if="!$v.userName.required">名前が入力されていません。</span>
        </div>
      </div>
      <div class="row mb-4">    
        <label class="form-label">password</label>
        <input v-model="password" type="text" name="password">
        <div v-if="$v.password.$dirty" class="text-danger fw-bold">
          <span v-if="!$v.password.required">passwordが入力されていません。</span>
        </div>
      </div>
      <div class="row mb-4">    
        <label class="form-label">メールアドレス</label>
        <input v-model="address" type="text" name="address">
        <div v-if="$v.address.$dirty" class="text-danger fw-bold">
          <span v-if="!$v.address.required">メールアドレスが入力されていません。</span>
        </div>
      </div>
      <div class="row mb-4">    
        <label class="form-label">年齢</label>
        <input v-model="age" type="text" name="age">
        <div v-if="$v.age.$dirty" class="text-danger fw-bold">
          <span v-if="!$v.age.required">年齢が入力されていません。</span>
        </div>
      </div>
      <div class="row mb-4">    
        <label class="form-label">部署</label>
        <select v-model="departmentId" class="form-select" name="departmentId">
          <option
            v-for="item in departments"
            :key="item.departmentId"
            :value="item.departmentId"
          >{{ item.departmentName }}</option>
        </select>
        <div v-if="$v.departmentId.$dirty" class="text-danger fw-bold">
          <span v-if="!$v.departmentId.required">部署が入力されていません。</span>
        </div>
      </div>
      <div class="text-end">
        <button type="submit" class="btn btn-primary" style="width: 156px;">登録
        </button>
      </div>
    </form>
  </main>
</div>

<script type="text/javascript">
const errors = `<%- errors %>`;
const departments = `<%- departments %>`;
const forms = `<%- forms %>`;

Vue.use(window.vuelidate.default);
const { required } = window.validators;

new Vue({
  el: "#usersCreate",
  data: {
    displayType: "",                   // フォーマットタイプ
    // サーバーデータ
    errors: JSON.parse(errors),
    departments: JSON.parse(departments),
    forms: JSON.parse(forms),
    // 登録データ
    id: '',
    userName: '',
    password: '',
    address: '',
    age: '',
    departmentId: '',
  },
  created() {
    this.setInitData();
  },
  mounted() {
  },
  validations: {
    userName: {
      required
    },
    password: {
      required
    },
    address: {
      required
    },
    age: {
      required
    },
    departmentId: {
      required
    }
  },
  methods: {
    /**
     * 登録情報セット
     */ 
    setInitData() {
      this.id = this.forms.id;
      this.userName = this.forms.userName;
      this.password = this.forms.password;
      this.address = this.forms.address;
      this.age = this.forms.age;
      this.departmentId = this.forms.departmentId;
      switch (location.pathname.split('/')[2]) {
        case 'create':
          this.displayType = 'create';
          break;
        case 'detail':
          this.displayType = 'detail';
          break;        
        default:
      }
    },
    /**
     * アップサート処理
     */ 
    onUpsert() {
      let action = this.displayType === 'create' ? '/users/create' : `/users/update/${location.pathname.split('/')[3]}?_method=PUT`;
      this.$v.$touch();
      if(!this.$v.$invalid) {
        document.usersFrom.method = 'post';
        document.usersFrom.action = action;
        document.usersFrom.submit();
      }
    }
  }
})
</script>
</body>
</html>
