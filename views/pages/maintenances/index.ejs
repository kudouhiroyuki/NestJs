<%- include('../../partials/head'); %>

<body>
<div class="layout">
  <%- include('../../partials/header'); %>

  <%- include('../../partials/sidebar'); %>

  <main id="maintenancesIndex">    
    <h4 class="mb-4 fw-bold" style="color:#0069D9;">
      <img src="/images/icon/maintenance.svg" style="width: 24px;">
      メンテナンス設定
    </h4>

    <!-- 登録フォーム -->
    <form @submit.prevent="onRegist" name="maintenancesRegist">
      <div class="baseShadow mb-5" style="padding: 2rem 3rem;">
        <!-- メンテナンス対象 -->
        <div class="mb-4">
          <label class="form-label fw-bold">メンテナンス対象</label>
          <div class="form-check mb-3">
            <input
              v-model="subject"
              name="subject"
              class="form-check-input"
              type="radio"
              id="subject_1"
              value="1"
            >
            <label class="form-check-label" for="subject_1">システムメンテナンス</label>
          </div>
          <div class="row mb-3">
            <input v-model="tenantId" type="hidden" name="tenantId">
            <div class="col-4">
              <input
                v-model="subject"
                name="subject"
                class="form-check-input"
                type="radio"
                id="subject_2"
                value="2"
              >
              <label class="form-check-label" for="subject_2">テナントメンテナンス</label>
            </div>
            <div class="col-3">
              <select v-model="tenantId" :disabled="subject!=='2'" class="form-select">
                <option hidden value="">選択してください</option>
                <option
                  v-for="item in tenants"
                  :key="item.tenantId"
                  :value="item.tenantId"
                >{{ item.tenantName }}</option>
              </select>
            </div>
          </div>
          <div class="row mb-3">
            <input v-model="vigorId" type="hidden" name="vigorId">
            <div class="col-4">
              <input
                v-model="subject"
                name="subject"
                class="form-check-input"
                type="radio"
                id="subject_3"
                value="3"
              >
              <label class="form-check-label" for="subject_3">機能メンテナンス</label>
            </div>
            <div class="col-3">
              <select v-model="vigorId" :disabled="subject!=='3'" class="form-select">
                <option hidden value="">選択してください</option>
                <option
                  v-for="item in vigors"
                  :key="item.id"
                  :value="item"
                >{{ item.name }}</option>
              </select>
            </div>
          </div>
          <div v-if="$v.checkTenantId.$dirty" class="text-danger fw-bold mt-2">
            <p v-if="!$v.checkTenantId.required">テナント名が入力されていません。</p>
          </div>
          <div v-if="$v.checkVigorId.$dirty" class="text-danger fw-bold mt-2">
            <p v-if="!$v.checkVigorId.required">機能名が入力されていません。</p>
          </div>
        </div>
        <!-- 開始・終了日時 -->
        <div class="row mb-4" style="align-items: flex-end;">
          <input v-model="startDate" type="hidden" name="startDate">
          <input v-model="endDate" type="hidden" name="endDate">
          <div class="col-8">
            <div class="d-inline-block">
              <label class="form-label fw-bold">開始日時</label>
              <vue-ctk-date-time-picker
                v-model="startDate"
                :format="'YYYY/MM/DD hh:mm a'"
                :formatted="'YYYY-MM-DD HH:mm a'"
                :label="'From'"
                position="top"
              /></vue-ctk-date-time-picker>
            </div>
            <div class="d-inline-block" style="margin: 0 20px;">〜</div>
            <div class="d-inline-block">
              <label class="form-label fw-bold">終了日時</label>
              <vue-ctk-date-time-picker
                v-model="endDate"
                :format="'YYYY/MM/DD hh:mm a'"
                :formatted="'YYYY-MM-DD HH:mm a'"
                :label="'From'"
                position="top"
              /></vue-ctk-date-time-picker>
            </div>
            <div v-if="$v.checkStartDate.$dirty" class="text-danger fw-bold mt-2">
              <p v-if="!$v.checkStartDate.required">開始日時が入力されていません。</p>
              <p v-if="!$v.checkStartDate.minValue">開始日時は現在日時以降で入力して下さい。</p>
              <p v-if="!$v.checkStartDate.maxValueValue">開始日時は終了日時以前で入力して下さい。</p>
            </div>
            <div v-if="$v.checkEndDate.$dirty" class="text-danger fw-bold mt-2">
              <p v-if="!$v.checkEndDate.required">終了日時が入力されていません。</p>
              <p v-if="!$v.checkEndDate.minValue">終了日時は現在日時以降で入力して下さい。</p>
              <p v-if="!$v.checkEndDate.minValueValue">終了日時は開始日時以降で入力して下さい。</p>
            </div>
          </div>
          <div class="col-4 text-end">
            <input type="submit" value="登録" class="btn baseBtnBlue" style="width: 156px;">
          </div>
        </div>
      </div>
    </form>

    <!-- 一覧テーブル -->
    <h5 class="mb-4 fw-bold">メンテナンス一覧</h5>
    <form name="maintenancesDelete">
      <div style="overflow: auto; width: 100%; height: 200px;" class="mb-5">
        <table class="table align-middle">
          <thead>
            <tr>
              <th style="position: sticky; top: 0; left: 0; background: white;">メンテナンス対象</th>
              <th style="position: sticky; top: 0; left: 0; background: white;">テナント名</th>
              <th style="position: sticky; top: 0; left: 0; background: white;">機能名</th>
              <th style="position: sticky; top: 0; left: 0; background: white;">開始日時</th>
              <th style="position: sticky; top: 0; left: 0; background: white;">終了日時</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="(item, index) in maintenances" :key="index">
              <td>{{ item.subject }}</td>
              <td>
                <template v-if="item.tenantName">{{ item.tenantName }}</template>
                <template v-else>-</template>
              </td>
              <td>
                <template v-if="item.vigorName">{{ item.vigorName }}</template>
                <template v-else>-</template>
              </td>
              <td>{{ item.startDate }}</td>
              <td>
                {{ item.endDate }}
                <button
                  @click="onDelete(item.id)"
                  v-if="new Date().getTime() < new Date(item.startDate).getTime()"
                  type="submit"
                  style="padding: 2px 0px;font-size: 14px;width: 60px;background-color: rgb(170, 170, 170);font-weight: bold;border-radius: 30px;border: 0px;margin-left: 20px;">
                  取消
                </button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <!-- ページネーション -->
      <nav class="d-flex justify-content-center" aria-label="Page navigation">
        <ul class="pagination mb-0">
          <li :class="{'disabled': Number(pageNumber) === 1}" class="page-item">
            <button
              @click="onPageChange(Number(pageNumber) - 1)"
              type="button"
              class="page-link">Previous
            </button>
          </li>
          <li
            v-for="value of totalPageCount"
            :key="value"
            :class="{'active': value === Number(pageNumber)}"
            class="page-item"
          >
            <button
              @click="onPageChange(value)"
              type="button"
              class="page-link">{{value}}
            </button>
          </li>
          <li :class="{'disabled': Number(pageNumber) === Number(totalPageCount)}" class="page-item">
            <button
              @click="onPageChange(Number(pageNumber) + 1)"
              type="button"
              class="page-link">Next
            </button>
          </li>
        </ul>
      </nav>
    </form>
  </main>
</div>

<script type="text/javascript">
const tenants= `<%- tenants %>`;
const vigors= `<%- vigors %>`;
const maintenances= `<%- maintenances %>`;
const totalPageCount= `<%- totalPageCount %>`;

const queryParam = new URLSearchParams(location.search);

const VueCtkDateTimePicker = window['vue-ctk-date-time-picker'];
Vue.component('vue-ctk-date-time-picker', VueCtkDateTimePicker);

Vue.use(window.vuelidate.default);
const { required, minValue, maxValueValue, minValueValue } = window.validators;

new Vue({
  el: "#maintenancesIndex",
  data: {
    checkTenantId: '',          // テナントID (入力チェック用)
    checkVigorId: '',           // 機能ID (入力チェック用)
    checkStartDate: '',         // 開始日時 (入力チェック用)
    checkEndDate: '',           // 終了日時 (入力チェック用)
    // APIデータ
    tenants: JSON.parse(tenants),
    vigors: JSON.parse(vigors),
    maintenances: JSON.parse(maintenances),
    totalPageCount: JSON.parse(totalPageCount),
    // 検索データ
    pageNumber: queryParam.get('pageNumber') ?? 1,
    // 登録データ
    subject: '1',                // メンテナンス対象
    tenantId: '',                // テナントID
    vigorId: '',                 // 機能ID
    startDate: null,             // 開始日時 (From)
    endDate: null,               // 終了日時 (To)
  },
  validations: {
    checkTenantId: {
      required
    },
    checkVigorId: {
      required
    },
    checkStartDate: {
      required,
      minValue: value => value > new Date().getTime(),
      maxValueValue: value => value < window.checkEndDate,
    },
    checkEndDate: {
      required,
      minValue: value => value > new Date().getTime(),
      minValueValue: value => value > window.checkStartDate,
    },
  },
  watch: {
    /**
     * テナントIDの変更監視（バリデーションチェック用）
     */ 
     tenantId: function(newVal, oldVal) {
      this.tenantId = newVal;
      this.checkTenantId = newVal;
    },
    /**
     * 機能IDの変更監視（バリデーションチェック用）
     */ 
     vigorId: function(newVal, oldVal) {
      this.vigorId = newVal;
      this.checkVigorId = newVal;
    },
    /**
     * 開始日時の変更監視（バリデーションチェック用）
     */
    startDate: function(newVal, oldVal) {
      this.startDate = null;
      this.checkStartDate = '';
      this.checkEndDate = '';
      window.checkStartDate = '';
      window.checkEndDate = '';
      if(newVal !== null) {
        let resultDate = moment(new Date(newVal.slice(0, -3)));
        if (newVal.match(/午後/)) resultDate.add(12, 'h').format();
        this.startDate = moment(resultDate._d).format("YYYY-MM-DD HH:mm:ss");
        this.checkStartDate = new Date(resultDate).getTime();
        window.checkStartDate = new Date(resultDate).getTime();
      }
      this.checkEndDate = new Date(this.endDate).getTime();
      window.checkEndDate = new Date(this.endDate).getTime();
    },
    /**
     * 終了日時の変更監視（バリデーションチェック用）
     */ 
    endDate: function(newVal, oldVal) {
      this.endDate = null;
      this.checkEndDate = '';
      this.checkStartDate = '';
      window.checkEndDate = '';
      window.checkStartDate = '';
      if(newVal !== null) {
        let resultDate = moment(new Date(newVal.slice(0, -3)));
        if (newVal.match(/午後/)) resultDate.add(12, 'h').format();
        this.endDate = moment(resultDate._d).format("YYYY-MM-DD HH:mm:ss");
        this.checkEndDate = new Date(resultDate).getTime();
        window.checkEndDate = new Date(resultDate).getTime();
      }
      this.checkStartDate = new Date(this.startDate).getTime();
      window.checkStartDate = new Date(this.startDate).getTime();
    }
  },
  created() {
    queryParam.set("pageNumber", this.pageNumber);
  },
  methods: {
    /**
     * テナントIDセット（バリデーションチェック用）
     */ 
    setCheckTenantId() {
      this.checkTenantId = '';
      if(this.subject === '1' || this.subject === '3') this.checkTenantId = 'dummy';
      if(this.subject === '2') this.checkTenantId = this.tenantId;
    },
    /**
     * 機能IDセット（バリデーションチェック用）
     */ 
     setCheckVigorId() {
      this.checkVigorId = '';
      if(this.subject === '1' || this.subject === '2') this.checkVigorId = 'dummy';
      if(this.subject === '3') this.checkVigorId = this.vigorId;
    },
    /**
     * 登録処理
     */ 
    onRegist() {
      this.setCheckTenantId();
      this.setCheckVigorId();
      this.$v.$touch();
      if(!this.$v.$invalid) {
        document.maintenancesRegist.method="post";
        document.maintenancesRegist.action = "/maintenances/regist";
        document.maintenancesRegist.submit();
      }
    },
    /**
     * 削除処理
     */ 
     onDelete(id) {
      document.maintenancesDelete.method="post";
      document.maintenancesDelete.action = `/maintenances/delete/${id}`;
      document.maintenancesDelete.submit();
    },
    /**
     * ページ番号（更新）
     */
     onPageChange(page) {
      queryParam.set("pageNumber", page);
      this.onSerch();
    },
    /**
     * 検索処理
     */ 
    onSerch() {
      window.location.href = "/maintenances?" + queryParam;
    },
  }
})
</script>
</body>
</html>