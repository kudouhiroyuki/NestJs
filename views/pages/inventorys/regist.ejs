<%- include('../../partials/head'); %>

<body>
<div class="layout">
  <%- include('../../partials/header'); %>

  <%- include('../../partials/sidebar'); %>

  <main id="inventorysRegist">
    <h4 class="mb-4 fw-bold">在庫登録</h4>

    <form @submit.prevent="onSubmit" name="divisionsForm">
      <!-- 在庫ID -->
      <div v-if="inventoryId" class="row mb-5">
        <div class="col-4">
          <label class="form-label">在庫ID</label>
          <p>{{ inventoryId }}</p>
        </div>
      </div>
      <!-- 在庫名 -->
      <div class="row mb-5">
        <div class="col-4">
          <label class="form-label">在庫名</label>
          <input
            v-model="inventoryName"
            name="inventoryName"
            type="text"
            class="form-control"
            placeholder="在庫名"
          >
        </div>
      </div>
      <!-- 在庫管理種別 -->
      <div class="mb-4">
        <label class="form-label">在庫管理種別</label>
        <div class="form-check mb-2 w-50">
          <input
            v-model="inventoryKindType"
            name="inventoryKindType"
            class="form-check-input"
            type="radio"
            id="sales_1"
            value="1"
          >
          <label class="form-check-label" for="sales_1">一般</label>
        </div>
        <div class="form-check mb-2 w-50">
          <input
            v-model="inventoryKindType"
            name="inventoryKindType"
            class="form-check-input"
            type="radio"
            id="sales_2"
            value="2"
          >
          <label class="form-check-label" for="sales_2">日付指定</label>
        </div>
        <div class="form-check mb-2 w-50">
          <input
            v-model="inventoryKindType"
            name="inventoryKindType"
            class="form-check-input"
            type="radio"
            id="sales_3"
            value="3"
          >
          <label class="form-check-label" for="sales_3">時間指定</label>
        </div>
      </div>
      <!-- 一般 -->
      <div v-if="inventoryKindType === '1'" class="row mb-5">
        <div class="col-4">
          <label class="form-label">在庫数</label>
          <input
            v-model="general"
            name="general"
            type="text"
            class="form-control"
            placeholder="在庫数"
          >
        </div>
      </div>
      
      <!-- ダウンロード・ファイル読込ボタン -->
      <div class="mb-5" style="text-align: right;">
        <input @click="onDownload" type="button" class="btn baseBtnGrey" value="ダウンロード" />
        <input @click="onImport" type="button" class="btn baseBtnGrey" value="ファイル取込み" />
      </div>
  
      <div class="row">
        <div style="position: relative;" class="col-6">
          <img
            @click="onCalendarPrev"
            style="cursor: pointer; transform: rotate(360deg); position: absolute; top: -5px; left: 20px;"
            src="/images/icon/arow_calendar.svg"
          />
          <div @click="onCalendarEventSet" class='renderCalendar' data-month="thisMonth"></div>
        </div>
        <div style="position: relative;" class="col-6">
          <img
            @click="onCalendarNext"
            style="cursor: pointer; transform: rotate(180deg); position: absolute; top: -5px; right: 20px;"
            src="/images/icon/arow_calendar.svg"
          />
          <div @click="onCalendarEventSet" class='renderCalendar' data-month="nextMonth"></div>
        </div>
      </div>
  
      <!-- 在庫確認・保存ボタン -->
      <div class="mb-5" style="text-align: right;">
        <input type="submit" value="在庫確認" class="btn baseBtnGrey" style="width: 156px; margin-right: 20px;">
        <input type="submit" value="保存" class="btn baseBtnBlue" style="width: 156px;">
      </div>
    </form>

    <!-- 在庫数入力（モーダル） -->
    <div :style="inventoryModal.show ? 'display: block' : 'display: none'" class="modalMain">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">在庫数入力</h5>
            <button @click="onInventoryModalClear" type="button" class="btn-close"></button>
          </div>
          <div class="modal-body m-3">
            <!-- 設定期間 -->
            <div class="mb-4">
              <label class="form-label w-100">設定期間</label>
              <div class="d-inline-block col-5">
                <vue-ctk-date-time-picker
                  v-model="inventoryModal.start"
                  format="YYYY/MM/DD"
                  formatted="YYYY/MM/DD"
                  only-date
                  :label="'From'"
                  position="bottom"
                /></vue-ctk-date-time-picker>
              </div>
              <div class="d-inline-block col-1" style="text-align: center;">〜</div>
              <div class="d-inline-block col-5">
                <vue-ctk-date-time-picker
                  v-model="inventoryModal.end"
                  format="YYYY/MM/DD"
                  formatted="YYYY/MM/DD"
                  only-date
                  :label="'To'"
                  position="bottom"
                /></vue-ctk-date-time-picker>
              </div>
            </div>
            <div class="d-flex flex-row-reverse">
              <!-- 登録 -->
              <template v-if="inventoryModal.type === 'new'">
                <input
                  @click="onPlanAdd"
                  type="button"
                  value="登録"
                  class="btn mt-5 baseBtnGrey"
                  style="width: 156px;"
                />
              </template>
              <!-- 編集・削除 -->
              <template v-if="inventoryModal.type === 'edit'">
                <!-- <input
                  @click="onPlanEdit"
                  type="button"
                  value="編集"
                  class="btn mt-5 baseBtnGrey"
                  style="width: 156px;"
                /> -->
                <input
                  @click="onInventoryDelete"
                  type="button"
                  value="削除"
                  class="btn mt-5 baseBtnGrey"
                  style="width: 156px; margin-right: 10px;"
                />
              </template>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      :style="inventoryModal.show ? 'display: block' : 'display: none'"
      class="modalBg"
      @click="onInventoryModalClear">
    </div>
  </main>
</div>

<script type="text/javascript">
const productId= `<%- productId %>`;
const inventoryId= `<%- inventoryId %>`;
const inventorys= `<%- inventorys %>`;

const VueCtkDateTimePicker = window['vue-ctk-date-time-picker'];
Vue.component('vue-ctk-date-time-picker', VueCtkDateTimePicker);

new Vue({
  el: "#inventorysRegist",
  data: {
    displayCheck: false,
    // 在庫数入力（モーダル）
    inventoryModal: {
      show: false,            // 表示ステータス
      type: '',               // 表示タイプ
      id: '',                 // ID（登録済み） 
      dummyId: '',            // ID（フロント仮登録） 
      start: null,            // 設定期間 (From)
      end: null,              // 設定期間 (To)
    },
    // APIデータ
    productId: productId ? JSON.parse(productId) : null,
    inventoryId: inventoryId ? JSON.parse(inventoryId) : null,
    inventorys: JSON.parse(inventorys),
    // カレンダー（イベント表示用）
    calendar: {
      initialView: 'dayGridMonth',
      locale: 'ja',
      initialDate: new Date(),
      headerToolbar: {
        left: '',
        center: 'title',
        right: ''
      },
      eventOrder: 'id',
      events: [],
      dayCellContent(e) {
        e.dayNumberText = e.dayNumberText.replace('日', '');
      },
      eventDidMount(info) {
        let event = {
          id: info.event.id,
          dummyId: info.event._def.extendedProps.dummyId,
          start: info.event._instance.range.start,
          end: info.event._instance.range.end,
        }
        let target = info.el.closest('.fc-daygrid-event-harness');
        target.dataset.event = JSON.stringify(event);
      },
    },
    // 登録データ
    inventoryName: "",        // 在庫名
    inventoryKindType: "2",   // 在庫管理種別
    changeInventorys: []      // カレンダー（更新・削除データ）
  },
  created() {
    this.createEventData(this.inventorys);
  },
  mounted() {
    this.renderCalendar(this.calendar, this.createBaseDate(this.calendar.initialDate));
  },
  methods: {
    /**
     * ダウンロード
     */
     onDownload() {
      let csvObjs = this.calendar.events.concat(this.changeInventorys);
      let csvBottom = 'id,action,優先順位,料金区分,設定期間 From,設定期間 To\n';
      csvObjs.forEach(el => {
        // 開始日
        let startDate = new Date(el.start);
        startDate = moment(startDate).format("YYYY-MM-DD");
        // 終了日
        let endDate = new Date(el.end);
        if(moment(startDate).format("YYYY-MM-DD") !== moment(endDate).format("YYYY-MM-DD") && el.end.indexOf('T24:00') !== -1) {
          endDate.setDate(endDate.getDate() - 1);
        }
        endDate = moment(endDate).format("YYYY-MM-DD");
   
        let line = `${el.id},${el.queryAction},${startDate},${endDate}`;
        csvBottom += (line + '\n');
      })
      let link = document.createElement('a');
      link.href = window.URL.createObjectURL(new Blob([csvBottom], { type: 'text/csv' }));
      link.download = '在庫一覧.csv';
      link.click();
    },

    /**
     * ファイル取込み
     */
     onImport () {
      alert("ファイル取込み")
    },

    /**
     * 保存
     */
     onSubmit() {
      let action = `/divisions/${this.productId}/regist`;
      if(this.productId && this.divisionId) {
        action = `/divisions/${this.productId}/detail/${this.divisionId}`
      }
      document.divisionsForm.method="post";
      document.divisionsForm.action = action;
      document.divisionsForm.submit();
    },

    /**
     * イベントデータ作成（共通 在庫数入力モーダル 在庫カレンダー）
     */
     createEventData(events) {
      events.forEach(item => {
        let retultDate = this.createBaseDate(item.end);
        // イベントタイトル作成
        this.inventorys.filter((value) => {
          if(item.feeId === value.feeId) item.title = value.sum;
        });
        // イベント開始・終了日の調整
        if((item.start !== item.end) && item.start.indexOf('T00:00') === -1) {
          item.start = `${item.start}T00:00`;
          item.end = `${item.end}T24:00`;
        }
        this.calendar.events.push(item);
      });
    },
    /**
     * 基準日の作成（共通 在庫数入力モーダル 在庫カレンダー）
     */ 
     createBaseDate(date) {
      let year = moment(date).format("YYYY");
      let month = moment(date).format("M");
      let day = moment(date).format("D");
      let retultDate = new Date(year, (month - 1), day);
      return retultDate;
    },

    /**
     * 在庫数入力モーダル（初期化）
     */
     onInventoryModalClear() {
      this.inventoryModal.show = false;
      this.inventoryModal.type = '';
      this.inventoryModal.id = '';
      this.inventoryModal.dummyId = '';
      this.inventoryModal.start = null;
      this.inventoryModal.end = null;
    },
    /**
     * 在庫数入力モーダル（表示）
     */
     onInventoryModalShow(type) {
      this.inventoryModal.show = true;
      this.inventoryModal.type = type;
    },
    /**
     * 料金設定モーダル（削除）
     */
     onInventoryDelete() {
      if(this.inventoryModal.id) {
        let event = {
          queryAction: 'DELETE',
          id: this.inventoryModal.id,
        };
        this.calendar.events = this.calendar.events.filter((value) => this.inventoryModal.id !== value.id);
        this.changeInventorys = this.changeInventorys.filter((value) => this.inventoryModal.id !== value.id && value.queryAction !== 'UPDATE');
        this.changeInventorys.push(event);
      } else {     
        this.calendar.events = this.calendar.events.filter((value) => this.inventoryModal.dummyId !== value.dummyId);
        this.changeInventorys = this.changeInventorys.filter((value) => this.inventoryModal.dummyId !== value.dummyId);
      }
      // カレンダー再描画
      let baseDate = new Date(this.calendar.initialDate);
      baseDate.setMonth(baseDate.getMonth() - 1);
      this.calendar.initialDate = baseDate;
      this.renderCalendar(this.calendar, baseDate);
      // モーダル初期化
      this.onInventoryModalClear();
    },

    /**
     * 在庫カレンダー（表示切り替え 1ヶ月前）
     */
     onCalendarPrev() {
      let baseDate = this.createBaseDate(this.calendar.initialDate);
      baseDate.setMonth(baseDate.getMonth() - 2);
      baseDate.setDate(1);
      this.calendar.initialDate = baseDate;
      this.updateCalendarView(baseDate);
    },
    /**
     * 在庫カレンダー（表示切り替え 1ヶ月後）
     */
    onCalendarNext() {
      let baseDate = this.createBaseDate(this.calendar.initialDate);
      baseDate.setMonth(baseDate.getMonth());
      baseDate.setDate(1);
      this.calendar.initialDate = baseDate;
      this.updateCalendarView(baseDate);
    },
    /**
     * 在庫カレンダー（イベントセット）
     */
    onCalendarEventSet(event) {
      const target = event.target.closest('.fc-daygrid-event-harness');
      if(target) {
        let endDate = this.createBaseDate(JSON.parse(target.dataset.event).end);
        endDate.setDate(endDate.getDate() - 1);
        this.inventoryModal.id = JSON.parse(target.dataset.event).id;
        this.inventoryModal.dummyId = JSON.parse(target.dataset.event).dummyId;
        this.inventoryModal.start = JSON.parse(target.dataset.event).start;
        this.inventoryModal.end = moment(new Date(endDate)).format("YYYY-MM-DD");
        this.onInventoryModalShow('edit');
      }
    },
    /**
     * 在庫カレンダー（描画）
     */
    renderCalendar(calendarObj, baseDate) {
      const calendars = document.querySelectorAll('.renderCalendar');
      calendars.forEach(function(calendarEl) {
        if(calendarEl.dataset['month'] === 'nextMonth') {    
          baseDate.setMonth(baseDate.getMonth() + 1);
          calendarObj.initialDate = baseDate;
        }
        let calendar = new FullCalendar.Calendar(calendarEl, calendarObj);
        calendar.render();
      });
    },
    /**
     * 在庫カレンダー（API再取得）
     */
    updateCalendarView(baseDate) {
      this.inventorys = [];
      this.calendar.events = [];
      this.getCalendarApi().then(res => {
        this.createEventData(this.inventorys.concat(this.changeInventorys));
        this.renderCalendar(this.calendar, baseDate);
      })
    },
    /**
     * 在庫カレンダーAPI
     */
    async getCalendarApi(args) {
      await axios.get('https://beauty.tsuku2.jp/api/menus?category_id=1').then((res) => {
        if (typeof res !== 'undefined') {
          return this.inventorys = [
            {
              id: '3',
              start: '2022-10-23',
              end: '2022-10-23',
              sum: '30'
            },
            {
              id: '4',
              start: '2022-11-07',
              end: '2022-11-07',
              sum: '60'
            }
          ]
        }
      }).catch((error) => {
        console.log(error);
      })
    },
  }
})
</script>
</body>
</html>