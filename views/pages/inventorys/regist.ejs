<%- include('../../partials/head'); %>

<body>
<div class="layout">
  <%- include('../../partials/header'); %>

  <%- include('../../partials/sidebar'); %>

  <main id="inventorysRegist">
    <h4 class="mb-4 fw-bold">在庫登録</h4>


    <form @submit.prevent="onSubmit" name="divisionsForm">
      <!-- 在庫ID -->
      <div v-if="inventoryId" class="row mb-5">
        <div class="col-4">
          <label class="form-label">在庫ID</label>
          <p>{{ inventoryId }}</p>
        </div>
      </div>

      <!-- 在庫名 -->
      <div class="row mb-5">
        <div class="col-4">
          <label class="form-label">在庫名</label>
          <input
            v-model="inventoryName"
            name="inventoryName"
            type="text"
            class="form-control"
            placeholder="在庫名"
          >
        </div>
      </div>

      <!-- 在庫管理種別 -->
      <div class="mb-4">
        <label class="form-label">在庫管理種別</label>
        <div class="form-check mb-2 w-50">
          <input
            v-model="inventoryKindType"
            name="inventoryKindType"
            class="form-check-input"
            type="radio"
            id="sales_1"
            value="1"
          >
          <label class="form-check-label" for="sales_1">一般</label>
        </div>
        <div class="form-check mb-2 w-50">
          <input
            v-model="inventoryKindType"
            name="inventoryKindType"
            class="form-check-input"
            type="radio"
            id="sales_2"
            value="2"
          >
          <label class="form-check-label" for="sales_2">日付指定</label>
        </div>
        <div class="form-check mb-2 w-50">
          <input
            v-model="inventoryKindType"
            name="inventoryKindType"
            class="form-check-input"
            type="radio"
            id="sales_3"
            value="3"
          >
          <label class="form-check-label" for="sales_3">時間指定</label>
        </div>
      </div>

      <!-- 一般 -->
      <input v-if="inventoryKindType === '1'" v-model="JSON.stringify(inventory)" type="hidden" name="inventory">
      <div v-show="inventoryKindType === '1'" class="row mb-5">
        <div class="col-4">
          <label class="form-label">在庫数</label>
          <input
            v-model="inventory"
            type="text"
            class="form-control"
            placeholder="在庫数"
          >
        </div>
      </div>

      <!-- 日付指定・時間指定 -->
      <input v-if="inventoryKindType === '1'" v-model="JSON.stringify(inventory)" type="hidden" name="inventory">
      <div v-show="inventoryKindType === '2' || inventoryKindType === '3'" class="row mb-5">
        <div class="mb-5" style="text-align: right;">
          <input @click="onDownload" type="button" class="btn baseBtnGrey" value="ダウンロード" />
          <input @change="onImport" type="file" type="button" class="btn baseBtnGrey" value="ファイル取込み" />
        </div>
        <div class="row">
          <div style="position: relative;" class="col-6">
            <img
              @click="onCalendarPrev"
              style="cursor: pointer; transform: rotate(360deg); position: absolute; top: -5px; left: 20px;"
              src="/images/icon/arow_calendar.svg"
            />
            <div @click="onCalendarEventSet" class='renderCalendar' data-month="thisMonth"></div>
          </div>
          <div style="position: relative;" class="col-6">
            <img
              @click="onCalendarNext"
              style="cursor: pointer; transform: rotate(180deg); position: absolute; top: -5px; right: 20px;"
              src="/images/icon/arow_calendar.svg"
            />
            <div @click="onCalendarEventSet" class='renderCalendar' data-month="nextMonth"></div>
          </div>
        </div>
      </div>
  
      <!-- 在庫確認・保存ボタン -->
      <div class="mb-5" style="text-align: right;">
        <input type="submit" value="在庫確認" class="btn baseBtnGrey" style="width: 156px; margin-right: 20px;">
        <input type="submit" value="保存" class="btn baseBtnBlue" style="width: 156px;">
      </div>
    </form>

    <!-- 在庫数入力（モーダル） -->
    <div :style="inventoryModal.show ? 'display: block' : 'display: none'" class="modalMain">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">在庫数入力</h5>
            <button @click="onInventoryModalClear" type="button" class="btn-close"></button>
          </div>
          <div class="modal-body m-3">
            <!-- 時間間隔 -->
            <div class="mb-4">
              <label class="form-label w-100">時間間隔</label>
              <select v-model="inventoryModal.intervalId" class="form-select">
                <option hidden value="">時間間隔</option>
                <option
                  v-for="item in timeIntervals"
                  :key="item.intervalId"
                  :value="item.intervalId"
                >{{ item.intervalName }}</option>
              </select>
            </div>
            <!-- 時間帯/在庫数 -->
            <table class="table align-middle mb-5">
              <thead>
                <tr>
                  <th scope="col">#</th>
                  <th scope="col">時間帯</th>
                  <th scope="col">在庫数</th>
                </tr>
              </thead>
              <tbody>
                <tr v-for="(item, index) in inventoryModal.timeInventory" :key="index">
                  <th>{{ index + 1 }}</th>
                  <td>{{ item.zoneName }}</td>
                  <td>
                    <input
                      v-model="item.inventory"
                      name="general"
                      type="text"
                      class="form-control"
                      placeholder="在庫数"
                    >
                </tr>
              </tbody>
            </table>

            <div class="d-flex flex-row-reverse">
              <!-- 編集・削除 -->
              <template v-if="inventoryModal.type === 'edit'">
                <input
                  @click="onPlanEdit"
                  type="button"
                  value="編集"
                  class="btn mt-5 baseBtnGrey"
                  style="width: 156px;"
                />
                <input
                  @click="onInventoryDelete"
                  type="button"
                  value="削除"
                  class="btn mt-5 baseBtnGrey"
                  style="width: 156px; margin-right: 10px;"
                />
              </template>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      :style="inventoryModal.show ? 'display: block' : 'display: none'"
      class="modalBg"
      @click="onInventoryModalClear">
    </div>
  </main>
</div>

<script type="text/javascript">
const productId= `<%- productId %>`;
const inventoryId= `<%- inventoryId %>`;
const timeIntervals= `<%- timeIntervals %>`;
const timeZones= `<%- timeZones %>`;
const inventorys= `<%- inventorys %>`;

new Vue({
  el: "#inventorysRegist",
  data: {
    displayCheck: false,
    // 在庫数入力（モーダル）
    inventoryModal: {
      show: false,            // 表示ステータス
      type: '',               // 表示タイプ
      id: '',                 // ID（登録済み）
      date: null,             // 日付
      intervalId: '',         // 時間間隔
      timeInventory: []       // 時間帯/在庫数
    },
    // APIデータ
    productId: productId ? JSON.parse(productId) : null,
    inventoryId: inventoryId ? JSON.parse(inventoryId) : null,
    timeIntervals: JSON.parse(timeIntervals),
    timeZones: JSON.parse(timeZones),
    inventorys: JSON.parse(inventorys),
    // カレンダー（イベント表示用）
    calendar: {
      initialView: 'dayGridMonth',
      locale: 'ja',
      initialDate: new Date(),
      headerToolbar: {
        left: '',
        center: 'title',
        right: ''
      },
      eventOrder: 'id',
      events: [],
      dayCellContent(e) {
        e.dayNumberText = e.dayNumberText.replace('日', '');
      },
      eventDidMount(info) {
        let event = {
          id: info.event.id,
          date: info.event._instance.range.start,
          intervalId: info.event._def.extendedProps.intervalId,
          timeInventory: info.event._def.extendedProps.timeInventory,
        }
        let target = info.el.closest('.fc-daygrid-event-harness');
        target.dataset.event = JSON.stringify(event);
      },
    },
    // 登録データ
    inventoryName: "",        // 在庫名
    inventoryKindType: "2",   // 在庫管理種別
    inventory: "",            // 在庫数
    changeInventorys: []      // カレンダー（更新・削除データ）
  },
  created() {
    this.createEventData(this.inventorys);
  },
  mounted() {
    this.renderCalendar(this.calendar, this.createBaseDate(this.calendar.initialDate));
  },
  methods: {
    /**
     * ダウンロード
     */
     onDownload() {
      let csvObjs = this.calendar.events.concat(this.changeInventorys);
      let timeZones = "";
      // 時間帯(Title)
      this.timeZones.forEach((item, index) => {
        let indent = ',';
        if(this.timeZones.length === index + 1) indent = '';
        timeZones += item.zoneName + indent;
      });
      let csv = `id,dummyId,action,date,intervalId,${timeZones}\n`;
      csvObjs.forEach(el => {
        // 日付
        let date = new Date(el.date);
        date = moment(date).format("YYYY-MM-DD");
        // 在庫数
        let inveResult = "";
        this.timeZones.forEach((item, index) => {
          let indent = this.timeZones.length === index + 1 ? '' : ',';
          let inveValue = "0";
          if(el.timeInventory) {
            el.timeInventory.forEach((i) => {
              if((item.intervalId === el.intervalId && item.zoneId === i.zoneId) && i.inventory !==undefined) {
                inveValue = i.inventory;
              }
            });
          }
          inveResult += inveValue + indent;
        });
        let line = `${el.id},${el.dummyId},${el.queryAction},${date},${el.intervalId},${inveResult}`;
        csv += (line + '\n');
      })
      let link = document.createElement('a');
      link.href = window.URL.createObjectURL(new Blob([csv], { type: 'text/csv' }));
      link.download = '在庫一覧.csv';
      link.click();
    },

    /**
     * ファイル取込み
     */
    onImport (e) {
      let reader = new FileReader();
      reader.readAsText(e.target.files[0]);
      reader.onload = (event) => {
        let csvs = this.conversionObj(event.target.result.split('\n'));    
        let events = [];
        csvs.forEach((item, index) => {
          let timeInventory = [];
          for (const [key, value] of Object.entries(item)) {
            if(key.match(/^[0-9\-]+$/) && (value !== '0' && value !== undefined)) {
              timeInventory.push({ zoneId: key.substr(2, 1), inventory: value })
            }
          }
          this.changeInventorys.push({
            id: item.id,
            dummyId: item.dummyId,              
            queryAction: 'UPDATE',
            date: item.date,
            intervalId: item.intervalId,
            timeInventory: timeInventory
          });
          events.push({
            id: item.id,
            date: item.date,
            intervalId: item.intervalId,
            timeInventory: timeInventory
          });
        });
        this.inventorys = this.inventorys.concat(events);
        this.createEventData(events);
        // カレンダー再描画
        let baseDate = new Date(this.calendar.initialDate);
        baseDate.setMonth(baseDate.getMonth() - 1);
        this.calendar.initialDate = baseDate;
        this.renderCalendar(this.calendar, baseDate);
      }
    },
    /**
     * オブジェクト変換（CSV）
     */
     conversionObj (items) {
      let result = [];
      for(let i = 1; i <items.length; ++i) {
        let baseKey = items[0].split(',');
        let value = items[i].split(',');
        let obj = new Object();
        for (let j = 0; j < baseKey.length; j++) {
          let resultKey = baseKey[j];
          let timeZone = this.timeZones.filter((item) => {
            return item.zoneName === baseKey[j];
          });
          if(timeZone[0]) resultKey = timeZone[0].intervalId + '-' + timeZone[0].zoneId;
          obj[resultKey] = value[j];
        }
        if(obj.id || obj.dummyId) result.push(obj);
      }
      return result;
    },

    /**
     * 保存
     */
     onSubmit() {
      let action = `/divisions/${this.productId}/regist`;
      if(this.productId && this.divisionId) {
        action = `/divisions/${this.productId}/detail/${this.divisionId}`
      }
      document.divisionsForm.method="post";
      document.divisionsForm.action = action;
      document.divisionsForm.submit();
    },

    /**
     * イベントデータ作成（共通 在庫数入力モーダル 在庫カレンダー）
     */
     createEventData(events) {
      events.forEach(item => {
        let retultDate = this.createBaseDate(item.end);
        // イベントタイトル作成
        item.title = item.timeInventory.reduce((sum, item) => {
          return sum + Number(item.inventory);
        }, 0);
        this.calendar.events.push(item);
      });
    },
    /**
     * 基準日の作成（共通 在庫数入力モーダル 在庫カレンダー）
     */ 
     createBaseDate(date) {
      let year = moment(date).format("YYYY");
      let month = moment(date).format("M");
      let day = moment(date).format("D");
      let retultDate = new Date(year, (month - 1), day);
      return retultDate;
    },

    /**
     * 在庫数入力モーダル（初期化）
     */
     onInventoryModalClear() {
      this.inventoryModal.show = false;
      this.inventoryModal.type = '';
      this.inventoryModal.id = '';
      this.inventoryModal.date = null;
      this.inventoryModal.intervalId = '';
      this.inventoryModal.timeInventory = []
    },

    /**
     * 在庫数入力モーダル（表示）
     */
     onInventoryModalShow(type) {
      this.inventoryModal.show = true;
      this.inventoryModal.type = type;
    },

    /**
     * 在庫数入力モーダル（データ作成 時間帯/在庫数）
     */
     createTimeInventory(id, intervalId) {
      this.inventoryModal.timeInventory = this.timeZones.filter((item) => {
        return item.intervalId === intervalId;
      });
      this.inventoryModal.timeInventory.forEach((modalItem, index) => {
        this.calendar.events.forEach((inventoryItem, index) => {
          if((id === inventoryItem.id) && (intervalId === inventoryItem.intervalId)) {
            let resultInven = 0;
            inventoryItem.timeInventory.forEach((i, index) => {
              if(modalItem.zoneId === i.zoneId) resultInven = i.inventory;
              modalItem.inventory = resultInven;
            });
          }
        });
      });
    },

    /**
     * 料金設定モーダル（編集）
     */
     onPlanEdit(e) {
      this.createEditEvent();
      this.createEditRate();
      // カレンダー再描画
      let baseDate = new Date(this.calendar.initialDate);
      baseDate.setMonth(baseDate.getMonth() - 1);
      this.calendar.initialDate = baseDate;
      this.renderCalendar(this.calendar, baseDate);
      // モーダル初期化
      this.onInventoryModalClear();
    },
    /**
     * 料金設定モーダル（編集 イベント作成）
     */
     createEditEvent() {
      this.calendar.events.forEach((item, index) => {
        if((item.id === this.inventoryModal.id) || (item.dummyId !== undefined && item.dummyId === this.inventoryModal.dummyId)) {
          // イベントタイトル作成
          this.calendar.events[index].title = this.inventoryModal.timeInventory.reduce((sum, i) => {
            return sum + Number(i.inventory ?? 0);
          }, 0);
          this.calendar.events[index].date = item.date;
          this.calendar.events[index].intervalId = this.inventoryModal.intervalId;
          this.calendar.events[index].timeInventory = this.inventoryModal.timeInventory;
        }
      });
    },
    /**
     * 料金設定モーダル（編集 履歴作成）
     */
     createEditRate() {
      if(this.inventoryModal.id) {
        let event = {
          queryAction: 'UPDATE',
          id: this.inventoryModal.id,
          date: this.inventoryModal.date,
          intervalId: this.inventoryModal.intervalId,
          timeInventory: this.inventoryModal.timeInventory,
        };
        let matchObj = this.changeInventorys.filter((value) => this.inventoryModal.id === value.id);
        if(matchObj.length) {
          this.changeInventorys.forEach((item, index) => {
            if(this.inventoryModal.id === item.id) this.changeInventorys[index] = event
          });

        } else {
          this.changeInventorys.push(event);
        }
      }
    },

    /**
     * 在庫数入力モーダル（削除）
     */
     onInventoryDelete() {
      if(this.inventoryModal.id) {
        let event = {
          queryAction: 'DELETE',
          id: this.inventoryModal.id,
        };
        this.calendar.events = this.calendar.events.filter((value) => this.inventoryModal.id !== value.id);
        this.changeInventorys = this.changeInventorys.filter((value) => this.inventoryModal.id !== value.id && value.queryAction !== 'UPDATE');
        this.changeInventorys.push(event);
      } else {     
        this.calendar.events = this.calendar.events.filter((value) => this.inventoryModal.dummyId !== value.dummyId);
        this.changeInventorys = this.changeInventorys.filter((value) => this.inventoryModal.dummyId !== value.dummyId);
      }
      // カレンダー再描画
      let baseDate = new Date(this.calendar.initialDate);
      baseDate.setMonth(baseDate.getMonth() - 1);
      this.calendar.initialDate = baseDate;
      this.renderCalendar(this.calendar, baseDate);
      // モーダル初期化
      this.onInventoryModalClear();
    },

    /**
     * 在庫カレンダー（表示切り替え 1ヶ月前）
     */
     onCalendarPrev() {
      let baseDate = this.createBaseDate(this.calendar.initialDate);
      baseDate.setMonth(baseDate.getMonth() - 2);
      baseDate.setDate(1);
      this.calendar.initialDate = baseDate;
      this.updateCalendarView(baseDate);
    },

    /**
     * 在庫カレンダー（表示切り替え 1ヶ月後）
     */
    onCalendarNext() {
      let baseDate = this.createBaseDate(this.calendar.initialDate);
      baseDate.setMonth(baseDate.getMonth());
      baseDate.setDate(1);
      this.calendar.initialDate = baseDate;
      this.updateCalendarView(baseDate);
    },

    /**
     * 在庫カレンダー（イベントセット）
     */
    onCalendarEventSet(event) {
      const target = event.target.closest('.fc-daygrid-event-harness');
      if(target) {        
        this.inventoryModal.id = JSON.parse(target.dataset.event).id;
        this.inventoryModal.dummyId = JSON.parse(target.dataset.event).dummyId;
        this.inventoryModal.date = JSON.parse(target.dataset.event).date;
        this.inventoryModal.intervalId = JSON.parse(target.dataset.event).intervalId;
        this.createTimeInventory(JSON.parse(target.dataset.event).id, JSON.parse(target.dataset.event).intervalId);
        this.onInventoryModalShow('edit');
      }
    },

    /**
     * 在庫カレンダー（描画）
     */
    renderCalendar(calendarObj, baseDate) {
      const calendars = document.querySelectorAll('.renderCalendar');
      calendars.forEach(function(calendarEl) {
        if(calendarEl.dataset['month'] === 'nextMonth') {    
          baseDate.setMonth(baseDate.getMonth() + 1);
          calendarObj.initialDate = baseDate;
        }
        let calendar = new FullCalendar.Calendar(calendarEl, calendarObj);
        calendar.render();
      });
    },

    /**
     * 在庫カレンダー（API再取得）
     */
    updateCalendarView(baseDate) {
      this.inventorys = [];
      this.calendar.events = [];
      this.getCalendarApi().then(res => {
        this.createEventData(this.inventorys.concat(this.changeInventorys));
        this.renderCalendar(this.calendar, baseDate);
      })
    },

    /**
     * 在庫カレンダーAPI
     */
    async getCalendarApi(args) {
      await axios.get('https://beauty.tsuku2.jp/api/menus?category_id=1').then((res) => {
        if (typeof res !== 'undefined') {
          return this.inventorys = [
            {
              id: '3',
              date: '2022-10-08',
              intervalId: '1',
              timeInventory: [{ zoneId: '3', inventory: '60' }]
            }
          ]
        }
      }).catch((error) => {
        console.log(error);
      })
    },
  }
})
</script>
</body>
</html