<%- include('../../partials/head'); %>

<body>
<div class="layout">
  <%- include('../../partials/header'); %>

  <%- include('../../partials/sidebar'); %>

  <main id="plansRegist">    
    <h4 class="mb-4 fw-bold">料金プラン登録</h4>
    <div class="row">
      <div class="col-4">
        <label class="form-label">料金プラン名</label>
        <input
          v-model="planName"
          name="planName"
          type="text"
          class="form-control"
          placeholder="料金プラン名"
        >
      </div>
    </div>

    <div style="text-align: right;">
      <input @click="onDownload" type="button" class="btn baseBtnGrey" value="ダウンロード" />
      <input @click="onImport" type="button" class="btn baseBtnGrey" value="ファイル取込み" />
    </div>
    
    <div class="row">
      <div class="col-6">
        <div class='renderCalendar' data-month="thisMonth"></div>
      </div>
      <div class="col-6">
        <div class='renderCalendar' data-month="nextMonth"></div>
      </div>
    </div>
  </main>
</div>

<script type="text/javascript">
const calendars= `<%- calendars %>`;
console.log()

new Vue({
  el: "#plansRegist",
  data: {
    title: '',
    calendar: {
      initialView: 'dayGridMonth',
      locale: 'ja',
      initialDate: new Date(),
      headerToolbar: {
        left: '',
        center: 'title',
        right: ''
      },
      events: JSON.parse(calendars).events,
      dayCellContent(e) {
        e.dayNumberText = e.dayNumberText.replace('日', '');
      }
    },
    // 登録データ
    planName: "",            // 料金プラン名
  },
  created() {
    
  },
  mounted() {
    this.renderCalendar(this.calendar, this.createBaseDate(this.calendar.initialDate));
  },
  methods: {
    // ダウンロード
    onDownload() {
      let csv = '\ufeff' + 'id,type,title,start,end\n';
      this.calendar.events.forEach(el => {
        let line = `${el['id']},${el['type']},${el['title']},${el['start']},${el['end']}`;
        csv += (line + '\n');
      })
      let link = document.createElement('a');
      link.href = window.URL.createObjectURL(new Blob([csv], { type: 'text/csv' }));
      link.download = 'お知らせ一覧.csv';
      link.click();
    },
    // ファイル取込み
    onImport () {
      alert("ファイル取込み")
    },
    // 基準日の作成
    createBaseDate(date) {
      let year = moment(date).format("YYYY");
      let month = moment(date).format("M");
      let retultDate = new Date(year, (month - 1));
      return retultDate;
    },
    // カレンダー描画
    renderCalendar(calendarObj, nextMonth) {
      const calendars = document.querySelectorAll('.renderCalendar');
      calendars.forEach(function(calendarEl) {
        if(calendarEl.dataset['month'] === 'nextMonth') {    
          nextMonth.setMonth(nextMonth.getMonth() + 1);
          calendarObj.initialDate = nextMonth;
        }
        let calendar = new FullCalendar.Calendar(calendarEl, calendarObj);
        calendar.render();
      });
    }
  }
})
</script>
</body>
</html>