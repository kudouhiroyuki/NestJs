<%- include('../../partials/head'); %>

<body>
<div class="layout">
  <%- include('../../partials/header'); %>

  <%- include('../../partials/sidebar'); %>

  <main id="plansRegist">
    <h4 class="mb-4 fw-bold">料金プラン登録</h4>
    <div class="row">
      <div class="col-4">
        <label class="form-label">料金プラン名</label>
        <input
          v-model="planName"
          name="planName"
          type="text"
          class="form-control"
          placeholder="料金プラン名"
        >
      </div>
    </div>

    <div class="mb-5" style="text-align: right;">
      <input @click="onDownload" type="button" class="btn baseBtnGrey" value="ダウンロード" />
      <input @click="onImport" type="button" class="btn baseBtnGrey" value="ファイル取込み" />
    </div>

    <div class="d-flex flex-row-reverse mb-4">
      <button class="dropdown border-0 bg-white" type="button" data-bs-toggle="dropdown">
        <img src="/images/icon/plus.svg">
      </button>
      <ul class="dropdown-menu">
        <button
          @click="onPlanModalShow('new')"
          type="button"
          class="dropdown-item small">
          プランを追加する
        </button>
      </ul>
    </div>
    
    <div class="row">
      <div style="position: relative;" class="col-6">
        <img
          @click="onCalendarPrev"
          style="cursor: pointer; transform: rotate(360deg); position: absolute; top: -5px; left: 20px;"
          src="/images/icon/arow_calendar.svg"
        />
        <div @click="onCalendarEventSet" class='renderCalendar' data-month="thisMonth"></div>
      </div>
      <div style="position: relative;" class="col-6">
        <img
          @click="onCalendarNext"
          style="cursor: pointer; transform: rotate(180deg); position: absolute; top: -5px; right: 20px;"
          src="/images/icon/arow_calendar.svg"
        />
        <div @click="onCalendarEventSet" class='renderCalendar' data-month="nextMonth"></div>
      </div>
    </div>

    <!-- 保存ボタン -->
    <div class="d-flex flex-row-reverse">
      <input
        type="submit"
        value="保存"
        class="btn mt-5 baseBtnGrey"
        style="width: 156px;"
      />
    </div>

    <!-- 料金設定（モーダル） -->
    <div :style="planModal.show ? 'display: block' : 'display: none'" class="modalMain">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">料金設定</h5>
            <button @click="onPlanModalClear" type="button" class="btn-close"></button>
          </div>
          <div class="modal-body m-3">
            <!-- 設定期間 -->
            <div class="mb-4">
              <label class="form-label w-100">設定期間</label>
              <div class="d-inline-block col-5">
                <vue-ctk-date-time-picker
                  v-model="planModal.start"
                  format="YYYY/MM/DD"
                  formatted="YYYY/MM/DD"
                  only-date
                  :label="'From'"
                  position="bottom"
                /></vue-ctk-date-time-picker>
              </div>
              <div class="d-inline-block col-1" style="text-align: center;">〜</div>
              <div class="d-inline-block col-5">
                <vue-ctk-date-time-picker
                  v-model="planModal.end"
                  format="YYYY/MM/DD"
                  formatted="YYYY/MM/DD"
                  only-date
                  :label="'To'"
                  position="bottom"
                /></vue-ctk-date-time-picker>
              </div>
            </div>
            <!-- 優先順位 -->
            <div class="col-7 mb-4">
              <label class="form-label w-100">優先順位</label>
              <input
                v-model="planModal.priority"
                type="text"
                class="form-control"
                placeholder="優先順位"
              >
            </div>
            <!-- 料金区分 -->
            <div class="col-6 mb-4">
              <label class="form-label w-100">料金区分</label>
              <select v-model="planModal.feeId" class="form-select mb-2">
                <option
                  v-for="item in feeCategorys"
                  :key="item.feeId"
                  :value="item.feeId"
                >{{ item.feeName }}</option>
              </select>
            </div>
            <div class="d-flex flex-row-reverse">
              <!-- 登録 -->
              <template v-if="planModal.type === 'new'">
                <input
                  @click="onPlanAdd"
                  type="button"
                  value="登録"
                  class="btn mt-5 baseBtnGrey"
                  style="width: 156px;"
                />
              </template>
              <!-- 編集・削除 -->
              <template v-if="planModal.type === 'edit'">
                <input
                  @click="onPlanEdit"
                  type="button"
                  value="編集"
                  class="btn mt-5 baseBtnGrey"
                  style="width: 156px;"
                />
                <input
                  @click="onPlanDelete"
                  type="button"
                  value="削除"
                  class="btn mt-5 baseBtnGrey"
                  style="width: 156px; margin-right: 10px;"
                />
              </template>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      :style="planModal.show ? 'display: block' : 'display: none'"
      class="modalBg"
      @click="onPlanModalClear">
    </div>
  </main>
</div>

<script type="text/javascript">  
const feeCategorys= `<%- feeCategorys %>`;

const VueCtkDateTimePicker = window['vue-ctk-date-time-picker'];
Vue.component('vue-ctk-date-time-picker', VueCtkDateTimePicker);

new Vue({
  el: "#plansRegist",
  data: {
    // 料金設定（モーダル）
    planModal: {
      show: false,            // 表示ステータス
      type: '',               // 表示タイプ
      id: '',                 // ID（登録済み） 
      dummyId: '',            // ID（フロント仮登録） 
      start: null,            // 設定期間 (From)
      end: null,              // 設定期間 (To)
      priority: '',           // 優先順位
      feeId: '',              // 料金区分
    },
    // カレンダー（イベント表示用）
    calendar: {
      initialView: 'dayGridMonth',
      locale: 'ja',
      initialDate: new Date(),
      headerToolbar: {
        left: '',
        center: 'title',
        right: ''
      },
      eventOrder: 'priority, id',
      events: [],
      dayCellContent(e) {
        e.dayNumberText = e.dayNumberText.replace('日', '');
      },
      eventDidMount(info) {
        let event = {
          id: info.event.id,
          dummyId: info.event._def.extendedProps.dummyId,
          start: info.event._instance.range.start,
          end: info.event._instance.range.end,
          priority: info.event._def.extendedProps.priority,
          feeId: info.event._def.extendedProps.feeId
        }
        let target = info.el.closest('.fc-daygrid-event-harness');
        target.dataset.event = JSON.stringify(event);
      },
    },
    // APIデータ
    ratePlans: [],
    feeCategorys: JSON.parse(feeCategorys),
    // 登録データ
    planName: "",        // 料金プラン名
    changeRatePlans: []  // カレンダー（登録・更新・削除データ）
  },
  created() {
    this.createEventData(this.ratePlans);
  },
  mounted() {
    this.renderCalendar(this.calendar, this.createBaseDate(this.calendar.initialDate));
  },
  methods: {
    /**
     * ダウンロード
     */
    onDownload() {
      let csvObjs = this.calendar.events.concat(this.changeRatePlans);
      let csvBottom = 'id,action,優先順位,料金区分,設定期間 From,設定期間 To\n';
      csvObjs.forEach(el => {
        // 開始日
        let startDate = new Date(el.start);
        startDate = moment(startDate).format("YYYY-MM-DD");
        // 終了日
        let endDate = new Date(el.end);
        if(moment(startDate).format("YYYY-MM-DD") !== moment(endDate).format("YYYY-MM-DD") && el.end.indexOf('T24:00') !== -1) {
          endDate.setDate(endDate.getDate() - 1);
        }
        endDate = moment(endDate).format("YYYY-MM-DD");
        // イベントタイトル作成
        let title = '';
        this.feeCategorys.filter((value) => {
          if(el.feeId === value.feeId) title = value.feeName;
        });
        let line = `${el.id},${el.queryAction},${el.priority},${title},${startDate},${endDate}`;
        csvBottom += (line + '\n');
      })
      let link = document.createElement('a');
      link.href = window.URL.createObjectURL(new Blob([csvBottom], { type: 'text/csv' }));
      link.download = 'お知らせ一覧.csv';
      link.click();
    },

    /**
     * ファイル取込み
     */
    onImport () {
      alert("ファイル取込み")
    },

    /**
     * 料金設定モーダル（初期化）
     */
    onPlanModalClear() {
      this.planModal.show = false;
      this.planModal.type = '';
      this.planModal.id = '';
      this.planModal.dummyId = '';
      this.planModal.start = null;
      this.planModal.end = null;
      this.planModal.priority = '';
      this.planModal.feeId = '';
    },

    /**
     * 料金設定モーダル（表示）
     */
    onPlanModalShow(type) {
      this.planModal.show = true;
      this.planModal.type = type;
    },
    
    /**
     * 料金設定モーダル（登録）
     */
    onPlanAdd() {
      let event = {
        dummyId: moment(new Date()).format("YYYY-MM-DD-HH-mm-ss"),
        queryAction: 'INSERT',
        start: moment(new Date(this.planModal.start)).format("YYYY-MM-DD"),
        end: moment(new Date(this.planModal.end)).format("YYYY-MM-DD"),
        priority: this.planModal.priority,
        feeId: this.planModal.feeId,
      };
      // カレンダー再描画
      let baseDate = new Date(this.calendar.initialDate);
      baseDate.setMonth(baseDate.getMonth() - 1);
      this.calendar.initialDate = baseDate;
      this.createEventData([event]);
      this.renderCalendar(this.calendar, baseDate);
      // 履歴作成
      this.changeRatePlans.push(event);
      // モーダル初期化
      this.onPlanModalClear();
    },

    /**
     * 料金設定モーダル（編集）
     */
    onPlanEdit() {
      this.createEditEvent();
      this.createEditRate();
      // カレンダー再描画
      let baseDate = new Date(this.calendar.initialDate);
      baseDate.setMonth(baseDate.getMonth() - 1);
      this.calendar.initialDate = baseDate;
      this.renderCalendar(this.calendar, baseDate);
      // モーダル初期化
      this.onPlanModalClear();
    },
    /**
     * 料金設定モーダル（編集 イベント作成）
     */
     createEditEvent() {
      this.calendar.events.forEach((item, index) => {
        if((item.id === this.planModal.id) || (item.dummyId !== undefined && item.dummyId === this.planModal.dummyId)) {
          // イベント開始・終了日の調整
          let startDate = moment(new Date(this.planModal.start)).format("YYYY-MM-DD");
          let endDate = moment(new Date(this.planModal.end)).format("YYYY-MM-DD");
          if(startDate !== endDate) {
            this.calendar.events[index].start = `${startDate}T00:00`;
            this.calendar.events[index].end = `${endDate}T24:00`;
          } else {
            this.calendar.events[index].start = startDate;
            this.calendar.events[index].end = endDate;
          }
          // イベントタイトル作成
          this.feeCategorys.filter((value) => {
            if(this.planModal.feeId === value.feeId) this.calendar.events[index].title = value.feeName;
          });
          this.calendar.events[index].priority = this.planModal.priority;
          this.calendar.events[index].feeId = this.planModal.feeId;
        }
      });
    },
    /**
     * 料金設定モーダル（編集 履歴作成）
     */
     createEditRate() {
      if(this.planModal.id) {
        let event = {
          queryAction: 'UPDATE',
          id: this.planModal.id,
          start: moment(new Date(this.planModal.start)).format("YYYY-MM-DD"),
          end: moment(new Date(this.planModal.end)).format("YYYY-MM-DD"),
          priority: this.planModal.priority,
          feeId: this.planModal.feeId,
        };
        let matchObj = this.changeRatePlans.filter((value) => this.planModal.id === value.id);
        if(matchObj.length) {
          this.changeRatePlans.forEach((item, index) => {
            if((item.id === this.planModal.id)) {
              // イベント開始・終了日の調整
              if(event.start !== event.end && event.start.indexOf('T00:00') === -1) {
                this.changeRatePlans[index].start = `${event.start}T00:00`;
                this.changeRatePlans[index].end = `${event.end}T24:00`;
              } else {
                this.changeRatePlans[index].start = event.start;
                this.changeRatePlans[index].end = event.end;
              }
              this.changeRatePlans[index].priority = this.planModal.priority;
              this.changeRatePlans[index].feeId = this.planModal.feeId;
            }
          });
        } else {
          this.changeRatePlans.push(event);
        }
      }
    },

    /**
     * 料金設定モーダル（削除）
     */
    onPlanDelete() {
      if(this.planModal.id) {
        let event = {
          queryAction: 'DELETE',
          id: this.planModal.id,
        };
        this.calendar.events = this.calendar.events.filter((value) => this.planModal.id !== value.id);
        this.changeRatePlans = this.changeRatePlans.filter((value) => this.planModal.id !== value.id && value.queryAction !== 'UPDATE');
        this.changeRatePlans.push(event);
      } else {     
        this.calendar.events = this.calendar.events.filter((value) => this.planModal.dummyId !== value.dummyId);
        this.changeRatePlans = this.changeRatePlans.filter((value) => this.planModal.dummyId !== value.dummyId);
      }
      // カレンダー再描画
      let baseDate = new Date(this.calendar.initialDate);
      baseDate.setMonth(baseDate.getMonth() - 1);
      this.calendar.initialDate = baseDate;
      this.renderCalendar(this.calendar, baseDate);
      // モーダル初期化
      this.onPlanModalClear();
    },

    /**
     * イベントデータ作成（表示用）
     */
     createEventData(events) {
      events.forEach(item => {
        let retultDate = this.createBaseDate(item.end);
        // イベントタイトル作成
        this.feeCategorys.filter((value) => {
          if(item.feeId === value.feeId) item.title = value.feeName;
        });
        // イベント開始・終了日の調整
        if((item.start !== item.end) && item.start.indexOf('T00:00') === -1) {
          item.start = `${item.start}T00:00`;
          item.end = `${item.end}T24:00`;
        }
        this.calendar.events.push(item);
      });
    },
    /**
     * 基準日の作成
     */ 
     createBaseDate(date) {
      let year = moment(date).format("YYYY");
      let month = moment(date).format("M");
      let day = moment(date).format("D");
      let retultDate = new Date(year, (month - 1), day);
      return retultDate;
    },
    /**
     * 料金カレンダー（表示切り替え 1ヶ月前）
     */
     onCalendarPrev() {
      let baseDate = this.createBaseDate(this.calendar.initialDate);
      baseDate.setMonth(baseDate.getMonth() - 2);
      baseDate.setDate(1);
      this.calendar.initialDate = baseDate;
      this.updateCalendarView(baseDate);
    },
    /**
     * 料金カレンダー（表示切り替え 1ヶ月後）
     */
    onCalendarNext() {
      let baseDate = this.createBaseDate(this.calendar.initialDate);
      baseDate.setMonth(baseDate.getMonth());
      baseDate.setDate(1);
      this.calendar.initialDate = baseDate;
      this.updateCalendarView(baseDate);
    },
    /**
     * 料金カレンダー（イベントセット）
     */
    onCalendarEventSet(event) {
      const target = event.target.closest('.fc-daygrid-event-harness');
      if(target) {
        let endDate = this.createBaseDate(JSON.parse(target.dataset.event).end);
        endDate.setDate(endDate.getDate() - 1);
        this.planModal.id = JSON.parse(target.dataset.event).id;
        this.planModal.dummyId = JSON.parse(target.dataset.event).dummyId;
        this.planModal.start = JSON.parse(target.dataset.event).start;
        this.planModal.end = moment(new Date(endDate)).format("YYYY-MM-DD");
        this.planModal.priority = JSON.parse(target.dataset.event).priority;
        this.planModal.feeId = JSON.parse(target.dataset.event).feeId;
        this.onPlanModalShow('edit');
      }
    },
    /**
     * 料金カレンダー（描画）
     */
    renderCalendar(calendarObj, baseDate) {
      const calendars = document.querySelectorAll('.renderCalendar');
      calendars.forEach(function(calendarEl) {
        if(calendarEl.dataset['month'] === 'nextMonth') {    
          baseDate.setMonth(baseDate.getMonth() + 1);
          calendarObj.initialDate = baseDate;
        }
        let calendar = new FullCalendar.Calendar(calendarEl, calendarObj);
        calendar.render();
      });
    },
    /**
     * 料金カレンダー（API再取得）
     */
    updateCalendarView(baseDate) {
      this.ratePlans = [];
      this.calendar.events = [];
      this.getCalendarApi().then(res => {
        this.createEventData(this.ratePlans.concat(this.changeRatePlans));
        this.renderCalendar(this.calendar, baseDate);
      })
    },
    /**
     * 料金カレンダーAPI
     */
    async getCalendarApi(args) {
      await axios.get('https://beauty.tsuku2.jp/api/menus?category_id=1').then((res) => {
        if (typeof res !== 'undefined') {
          return this.ratePlans = [
            {
              id: '4',
              start: '2022-10-23',
              end: '2022-10-26',
              priority: '1',
              feeId: '3'
            },
            {
              id: '5',
              start: '2022-11-07',
              end: '2022-11-07',
              priority: '1',
              feeId: '1'
            }
          ]
        }
      }).catch((error) => {
        console.log(error);
      })
    },
  }
})
</script>
</body>
</html>