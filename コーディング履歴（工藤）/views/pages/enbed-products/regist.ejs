<%- include('../../partials/head'); %>

<body>
<div class="layout">
  <%- include('../../partials/header'); %>

  <%- include('../../partials/sidebar'); %>

  <main id="enbedProductsIndex">
    <div class="d-flex mb-5">
      <div class="me-auto">
        <h4 class="mb-4 fw-bold" style="color:#0069D9;">
          <img src="/images/icon/products.svg" style="width: 24px;">
          <template v-if="displayType === 'regist'" class="fs-4">組込商品登録</template>
          <template v-else class="fs-4">組込商品詳細</template>
        </h4>
      </div>
      <div class="d-flex flex-row-reverse mb-4">
        <button class="dropdown border-0 bg-white" type="button" data-bs-toggle="dropdown">
          <img src="/images/icon/plus.svg">
        </button>
        <ul class="dropdown-menu">
          <li @click="onProductModalOpen('privateCompany')" class="dropdown-item small">自社商品を追加する</li>
          <li @click="onProductModalOpen('otherCompany')" class="dropdown-item small">他社商品を追加する</li>
          <li @click="onBusModalOpen('top')" class="dropdown-item small">バス路線を追加する</li>
          <li @click="onHotelModalOpen('top')" class="dropdown-item small">宿泊プランを追加する</li>
        </ul>
      </div>
    </div>

    <form name="enbedProductsForm">
    </form>

    <!-- 保存して次へ -->
    <div v-if="displayType === 'regist'" class="d-flex flex-row-reverse">
      <input
        @click="onProductFeePlansRegistPage"
        type="button"
        value="保存して次へ"
        class="btn mt-4 baseBtnBlue"
        style="width: 156px;"
      />
    </div>

    <!-- 戻る -->
    <div v-if="displayType === 'detail'" class="d-flex flex-row-reverse">
      <input
        @click="onProductsDetailPage"
        type="button"
        value="戻る"
        class="btn mt-4 baseBtnBlue"
        style="width: 156px;"
      />
    </div>

    <!-- 商品モーダル -->
    <!-- <div :style="productModal.show ? 'display: block' : 'display: none'" class="modalMain">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              <template v-if="productModal.type === 'privateCompany'">組み込み商品選択（自社）</template>
              <template v-if="productModal.type === 'otherCompany'">組み込み商品選択（他社）</template>
            </h5>
            <button @click="onProductModalClose" type="button" class="btn-close"></button>
          </div>
        </div>
      </div>
    </div>
    <div
      :style="productModal.show ? 'display: block' : 'display: none'"
      class="modalBg"
      @click="onProductModalClose">
    </div> -->

    <!-- 商品(モーダル) -->
    <div :style="productModal.show ? 'display: block' : 'display: none'" class="modalMain">
      <div class="modal-dialog" style="width: 400px">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              <template v-if="productModal.type === 'privateCompany'">自社商品選択</template>
              <template v-if="productModal.type === 'otherCompany'">他社商品選択</template>
            </h5>
            <button @click="onProductsModalClear" type="button" class="btn-close"></button>
          </div>
          <!-- 自社商品 -->
          <div v-if="productModal.type === 'privateCompany'" class="modal-body m-3">
            <div v-if="productModal.current === '1'" class="col-12 mb-4">
              <p v-if="productModal.resultItemsError" class="text-danger fw-bold mt-2">商品が見つかりません。</p>
              <label class="form-label">商品ID</label>
              <input
                v-model="productModal.productId"
                @input="onProductsInput('productId')"
                @focus="onProductsFocus"
                type="text"
                class="form-control"
                placeholder="商品ID"
              >
              <p v-if="productModal.productIdError" class="text-danger fw-bold mt-2">必須項目が入力されていません。</p>
              <template v-if="productModal.productIdShow">
                <div v-for="(item, index) of productModal.resultItems" class="list-group w-75 float-end">
                  <a
                    @click="onProductsSelect('productId', item)"
                    style="cursor: pointer"
                    class="list-group-item list-group-item-action"
                  >{{ item.productId }}:{{ item.product_name }}</a>
                </div>
              </template>
              <label class="form-label mt-4">料金プランID</label>
              <input
                v-model="productModal.planId"
                @input="onProductsInput('planId')"
                @focus="onProductsFocus"
                type="text"
                class="form-control"
                placeholder="料金プランID"
              >
              <p v-if="productModal.planIdError" class="text-danger fw-bold mt-2">必須項目が入力されていません。</p>
              <template v-if="productModal.planIdShow">
                <div v-for="(item, index) of productModal.resultItems" :key="index" class="list-group w-75 float-end">
                  <a
                    @click="onProductsSelect('planId', item)"
                    style="cursor: pointer"
                    class="list-group-item list-group-item-action"
                  >{{ item.planId }}:{{ item.plan_name }}</a>
                </div>
              </template>
              <label class="form-label mt-4">在庫ID</label>
              <input
                v-model="productModal.stockId"
                @input="onProductsInput('stockId')"
                @focus="onProductsFocus"
                type="text"
                class="form-control"
                placeholder="在庫ID"
              >
              <p v-if="productModal.stockIdError" class="text-danger fw-bold mt-2">必須項目が入力されていません。</p>
              <template v-if="productModal.stockIdShow">
                <div v-for="(item, index) of productModal.resultItems" :key="index" class="list-group w-75 float-end">
                  <a
                    @click="onProductsSelect('stockId', item)"
                    style="cursor: pointer"
                    class="list-group-item list-group-item-action"
                  >{{ item.stockId }}:{{ item.stock_name }}</a>
                </div>
              </template>
              <input
                @click="onProductsModalMove"
                type="button"
                value="次へ"
                class="btn mt-4 baseBtnGrey"
                style="width: 156px; float: right;"
              />
            </div>
            <div v-if="productModal.current === '2'" class="col-12 mb-4">
              <p v-if="productModal.diffItemsError" class="text-danger fw-bold mt-2">既に商品追加されています。</p>
              <p v-if="productModal.peggingError" class="text-danger fw-bold mt-2">紐付設定が入力されていません。</p>
              <table class="table align-middle">
                <thead>
                  <tr>
                    <th scope="col">#</th>
                    <th scope="col">年齢区分</th>
                    <th scope="col">紐付設定</th>
                  </tr>
                </thead>
                <tbody>
                  <tr v-for="(category, index) in ageCategory" :key="index">
                    <th>{{ index + 1 }}</th>
                    <td>{{ category.name }}</td>
                    <td>
                      <select @change="onAgePeggingChange($event, index)" class="form-select">
                        <option hidden value="">年齢区分</option>
                        <option
                          v-for="(result, index) in productModal.resultItems[0].peggingSettings"
                          :value="JSON.stringify(result)"
                          :key="index"
                        >{{ result.name }}</option>
                      </select>
                    </td>
                  </tr>
                </tbody>
              </table>
              <input
                @click="onProductsRegist"
                type="button"
                value="登録"
                class="btn mt-4 BtnGrey"
                style="width: 156px; float: right;"
              />
            </div>
          </div>
          <!-- 他社商品 -->
          <div v-if="productModal.type === 'otherCompany'" class="modal-body m-3">
            <div v-if="productModal.current === '1'" class="col-12 mb-4">
              <label class="form-label">商品ID</label>
              <input
                v-model="productModal.productId"
                type="text"
                class="form-control"
                placeholder="商品ID"
              >
              <p v-if="productModal.productIdError" class="text-danger fw-bold mt-2">必須項目が入力されていません。</p>
              <label class="form-label mt-4">料金プランID</label>
              <input
                v-model="productModal.planId"
                type="text"
                class="form-control"
                placeholder="料金プランID"
              >
              <p v-if="productModal.planIdError" class="text-danger fw-bold mt-2">必須項目が入力されていません。</p>
              <label class="form-label mt-4">在庫ID</label>
              <input
                v-model="productModal.stockId"
                type="text"
                class="form-control"
                placeholder="在庫ID"
              >
              <p v-if="productModal.stockIdError" class="text-danger fw-bold mt-2">必須項目が入力されていません。</p>
              <input
              @click="onProductsApi"
                type="button"
                value="次へ"
                class="btn mt-4 baseBtnGrey"
                style="width: 156px; float: right;"
              />
            </div>
            <div v-if="productModal.current === '2'" class="col-12 mb-4">
              <p v-if="productModal.diffItemsError" class="text-danger fw-bold mt-2">既に商品追加されています。</p>
              <p v-if="productModal.peggingError" class="text-danger fw-bold mt-2">紐付設定が入力されていません。</p>
              <table class="table align-middle">
                <thead>
                  <tr>
                    <th scope="col">#</th>
                    <th scope="col">年齢区分</th>
                    <th scope="col">紐付設定</th>
                  </tr>
                </thead>
                <tbody>
                  <tr v-for="(category, index) in ageCategory" :key="index">
                    <th>{{ index + 1 }}</th>
                    <td>{{ category.name }}</td>
                    <td>
                      <select @change="onAgePeggingChange($event, index)" class="form-select">
                        <option hidden value="">年齢区分</option>
                        <option
                          v-for="(result, index) in productModal.resultItems[0].peggingSettings"
                          :value="JSON.stringify(result)"
                          :key="index"
                        >{{ result.name }}</option>
                      </select>
                    </td>
                  </tr>
                </tbody>
              </table>
              <input
                @click="onProductsRegist"
                type="button"
                value="登録"
                class="btn mt-4 baseBtnGrey"
                style="width: 156px; float: right;"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      :style="productModal.show ? 'display: block' : 'display: none'"
      class="modalBg"
      @click="onProductsModalClear">
    </div>

    <!-- バスモーダル -->
    <div :style="busModal.show ? 'display: block' : 'display: none'" class="modalMain">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">バス路線・便選択</h5>
            <button @click="onBusModalClose" type="button" class="btn-close"></button>
          </div>
        </div>
      </div>
    </div>
    <div
      :style="busModal.show ? 'display: block' : 'display: none'"
      class="modalBg"
      @click="onBusModalClose">
    </div>

    <!-- ホテルモーダル -->
    <div :style="hotelModal.show ? 'display: block' : 'display: none'" class="modalMain">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">ホテル選択</h5>
            <button @click="onHotelModalClose" type="button" class="btn-close"></button>
          </div>
        </div>
      </div>
    </div>
    <div
      :style="hotelModal.show ? 'display: block' : 'display: none'"
      class="modalBg"
      @click="onHotelModalClose">
    </div>
  </main>
</div>

<!-- https://github.com/kudouhiroyuki/NestJs/blob/edc7866499b8171e13a8676ea73d1a34797c650b/src/products/products.controller.ts -->
<!-- https://github.com/kudouhiroyuki/NestJs/blob/edc7866499b8171e13a8676ea73d1a34797c650b/views/pages/products/registSet.ejs -->

<script type="text/javascript">
const products = `<%- products %>`;
const ages = `<%- ages %>`;

new Vue({
  el: "#enbedProductsIndex",
  data: {
    displayType: "",                   // フォーマットタイプ
    // 商品モーダル
    productModal: {
      show: false,              // 表示ステータス
      type: "",                 // 表示タイプ
      current: "",              // カレントページ
      productId: "",            // 商品ID
      planId: "",               // 料金プランID
      stockId: "",              // 在庫ID
      productIdShow: false,     // 商品ID（プルダウン）
      planIdShow: false,        // 料金プランID（プルダウン）
      stockIdShow: false,       // 在庫ID（プルダウン）
      ageCategoryError: false,  // チェック結果（年齢区分）
      resultItems: [],          // フィルタリング結果（値）
      resultItemsError: false,  // フィルタリング結果（フラグ）
      productIdError: false,    // バリデーション結果（商品ID　必須チェック）
      planIdError: false,       // バリデーション結果（料金プランID　必須チェック）
      stockIdError: false,      // バリデーション結果（在庫ID　必須チェック）
      peggingError: false,      // バリデーション結果（紐付設定 必須チェック）
      diffItemsError: false     // バリデーション結果（重複チェック）
    },
    // バスモーダル
    busModal: {
      show: false,
      current: '',
    },
    // ホテルモーダル
    hotelModal: {
      show: false,
      current: '',
    },
    // APIデータ
    products: JSON.parse(products),
    ages: JSON.parse(ages),
  },
  created() {
    this.setInitData();
  },
  mounted() {
  },
  methods: {
    /**
     * 登録情報セット
     */ 
    setInitData() {
      switch (location.pathname.split('/')[2]) {
        case 'regist':
          this.displayType = 'regist';
          break;
        case 'detail':
          this.displayType = 'detail';
          break;         
        default:
      }
    },
    // 商品料金設定 登録（画面遷移）
    onProductFeePlansRegistPage() {
      document.enbedProductsForm.method="post";
      document.enbedProductsForm.action = "/enbedProducts/productFeePlans";
      document.enbedProductsForm.submit();
    },
    // 商品詳細（画面遷移）
    onProductsDetailPage() {
      window.location.href = `/products/detail/${location.pathname.split('/')[3]}`;
    },

    /**
     * 商品モーダル（Open）
     */
    onProductModalOpen(type) {
      this.onProductsModalClear();
      this.productModal.show = true;
      this.productModal.type = type;
      this.productModal.current = "1";
    },
    /**
     * 商品モーダル（初期化）
     */ 
     onProductsModalClear() {
      this.productModal.show = false;
      this.productModal.type = "";
      this.productModal.current = "";
      this.productModal.productId = "";
      this.productModal.planId = "";
      this.productModal.stockId = "";
      this.productModal.ageCategoryError = false;
      this.productModal.resultItemsError = false;
      this.productModal.peggingError = false;
      this.productModal.diffItemsError = false;
    },

    // 組み込み商品モーダル（登録）
    onProductsRegist() {
      this.validationLastPage();
      if(this.productModal.peggingError === false && this.productModal.diffItemsError === false) {
        if(this.setProducts.length === 0) {
          this.setProducts = this.productModal.resultItems;
          this.onProductsModalClear();
        } else {
          this.setProducts.push(this.productModal.resultItems[0]);
          this.onProductsModalClear();
        }
      }
    },
    // 組み込み商品モーダル（削除）
    onProductsDelete(target) {
      this.setProducts = this.setProducts.filter((item) => {
        if(item.productId.indexOf(String(target.productId)) === -1) return item;
      });
    },
    // 組み込み商品モーダル（ページ遷移）
    onProductsModalMove() {
      let items = this.productModal.resultItems.filter((item) => {
        return item.productId === String(this.productModal.productId)
        && item.planId === String(this.productModal.planId)
        && item.stockId === String(this.productModal.stockId);
      });
      if(this.validationFirstPage() && items.length) {
        this.createAgePegging();
        this.productModal.current = "2";
      } else {
        this.productModal.resultItemsError = true;
      }
    },
    // 組み込み商品モーダル（API 商品存在チェック + ページ遷移）
    onProductsApi() {
      if(this.validationFirstPage()) {
        this.getProductsApi().then((res) => {
          if(res) {
            this.productModal.current = "2";
            this.productModal.resultItems = res;
            this.createAgePegging();
          }
        });
      }
    },
    // 組み込み商品モーダル（入力値チェック Firstページ）
    validationFirstPage() {
      this.productModal.productIdError = false;
      this.productModal.planIdError = false;
      this.productModal.stockIdError = false;
      if(this.productModal.productId === "") this.productModal.productIdError = true;
      if(this.productModal.planId === "") this.productModal.planIdError = true;
      if(this.productModal.stockId === "") this.productModal.stockIdError = true;
      if(
        this.productModal.productIdError === true
        || this.productModal.planIdError === true
        || this.productModal.stockIdError === true
      ) {
        return false;
      } else {
        return true;
      }
    },
    // 組み込み商品モーダル（入力値チェック Lastページ）
      validationLastPage() {
      // 紐付設定の入力チェック
      const peggingCheck = this.productModal.resultItems[0].agePeggings.filter(element => {
        return element.pegging === "";
      });
      if(peggingCheck.length) this.productModal.peggingError = true;
      // 重複登録チェック
      if(this.setProducts.length !== 0) {
        const diffCheck = this.setProducts.filter(element => {
          return String(element.productId) === String(this.productModal.resultItems[0].productId)
          && String(element.planId) === String(this.productModal.resultItems[0].planId)
          && String(element.stockId) === String(this.productModal.resultItems[0].stockId)
        });
        if(diffCheck.length !== 0) this.productModal.diffItemsError = true;
      }
    },
    // 組み込み商品モーダル（検索候補 フィルタリング）
    productsFilter() {
      this.productModal.resultItems = this.products.filter((item) => {
        return item.productId.indexOf(String(this.productModal.productId)) !== -1
        && item.planId.indexOf(String(this.productModal.planId)) !== -1
        && item.stockId.indexOf(String(this.productModal.stockId)) !== -1;
      });
    },
    // 組み込み商品モーダル（検索候補 入力）
    onProductsInput(target) {
      this.productModal.resultItems = [];
      if(target==='productId') this.productModal.productIdShow = true;
      if(target==='planId') this.productModal.planIdShow = true;
      if(target==='stockId') this.productModal.stockIdShow = true;
      this.productsFilter();
    },
    // 組み込み商品モーダル（検索候補 確定）
    onProductsSelect(target, item) {
      this.productModal.resultItems = [];
      if(target === 'productId') this.productModal.productId = item.productId;
      if(target === 'planId') this.productModal.planId = item.planId;
      if(target === 'stockId') this.productModal.stockId = item.stockId;
      this.productModal.productIdShow = false;
      this.productModal.planIdShow = false;
      this.productModal.stockIdShow = false;
      this.productsFilter();
    },
    // 組み込み商品モーダル（検索候補 フォーカス）
    onProductsFocus() {
      this.productModal.productIdShow = false;
      this.productModal.planIdShow = false;
      this.productModal.stockIdShow = false;
    },
    // 組み込み商品モーダル（年齢区分 + 紐付設定 データ作成）
    createAgePegging(event, index) {
      let resultData = [];
      this.ageCategory.forEach((element, index) => {
        let obj = {};
        obj['age'] = element.name;
        obj['pegging'] = "";
        resultData.push(obj);
      })
      this.productModal.resultItems[0].agePeggings = resultData;
    },
    // 組み込み商品モーダル（紐付設定 データ更新）
    onAgePeggingChange(event, index) {
      this.productModal.peggingError = false;
      this.productModal.resultItems[0].agePeggings[index].pegging = JSON.parse(event.target.value).name;
    },




    /**
     * バスモーダル（Open）
     */
    onBusModalOpen(current) {
      this.busModal.show = true;
      this.busModal.current = current;
    },
    /**
     * バスモーダル（Close）
     */ 
    onBusModalClose() {
      this.busModal.show = false;
      this.busModal.current = '';
    },

    /**
     * ホテルモーダル（Open）
     */
    onHotelModalOpen(current) {
      this.hotelModal.show = true;
      this.hotelModal.current = current;
    },
    /**
     * ホテルモーダル（Close）
     */ 
    onHotelModalClose() {
      this.hotelModal.show = false;
      this.hotelModal.current = '';
    },
  }
})
</script>
</body>
</html>